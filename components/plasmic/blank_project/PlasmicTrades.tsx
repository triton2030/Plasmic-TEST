// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s3vYkmQ5LBtDtfz4GgoiLa
// Component: c1ndgUNw6T
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: s3vYkmQ5LBtDtfz4GgoiLa/projectcss
import sty from "./PlasmicTrades.module.css"; // plasmic-import: c1ndgUNw6T/css

export type PlasmicTrades__VariantMembers = {};
export type PlasmicTrades__VariantsArgs = {};
type VariantPropType = keyof PlasmicTrades__VariantsArgs;
export const PlasmicTrades__VariantProps = new Array<VariantPropType>();

export type PlasmicTrades__ArgsType = {};
type ArgPropType = keyof PlasmicTrades__ArgsType;
export const PlasmicTrades__ArgProps = new Array<ArgPropType>();

export type PlasmicTrades__OverridesType = {
  frame123?: p.Flex<"div">;
  frame124?: p.Flex<"div">;
  frame125?: p.Flex<"div">;
  frame126?: p.Flex<"div">;
};

export interface DefaultTradesProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTrades__RenderFunc(props: {
  variants: PlasmicTrades__VariantsArgs;
  args: PlasmicTrades__ArgsType;
  overrides: PlasmicTrades__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"frame123"}
      data-plasmic-override={overrides.frame123}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.frame123
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"frame124"}
        data-plasmic-override={overrides.frame124}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame124)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__u0Ozj
          )}
        >
          {"0.916 BTC"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame125"}
        data-plasmic-override={overrides.frame125}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame125)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vhXhc
          )}
        >
          {"$1,566.56"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame126"}
        data-plasmic-override={overrides.frame126}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame126)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__osbLe
          )}
        >
          {"30s ago"}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame123: ["frame123", "frame124", "frame125", "frame126"],
  frame124: ["frame124"],
  frame125: ["frame125"],
  frame126: ["frame126"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame123: "div";
  frame124: "div";
  frame125: "div";
  frame126: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTrades__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTrades__VariantsArgs;
    args?: PlasmicTrades__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTrades__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTrades__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTrades__ArgProps,
          internalVariantPropNames: PlasmicTrades__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTrades__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame123") {
    func.displayName = "PlasmicTrades";
  } else {
    func.displayName = `PlasmicTrades.${nodeName}`;
  }
  return func;
}

export const PlasmicTrades = Object.assign(
  // Top-level PlasmicTrades renders the root element
  makeNodeComponent("frame123"),
  {
    // Helper components rendering sub-elements
    frame124: makeNodeComponent("frame124"),
    frame125: makeNodeComponent("frame125"),
    frame126: makeNodeComponent("frame126"),

    // Metadata about props expected for PlasmicTrades
    internalVariantProps: PlasmicTrades__VariantProps,
    internalArgProps: PlasmicTrades__ArgProps
  }
);

export default PlasmicTrades;
/* prettier-ignore-end */
