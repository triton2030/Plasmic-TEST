// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s3vYkmQ5LBtDtfz4GgoiLa
// Component: josnsSoXKZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: s3vYkmQ5LBtDtfz4GgoiLa/projectcss
import sty from "./PlasmicPriceComp.module.css"; // plasmic-import: josnsSoXKZ/css

export type PlasmicPriceComp__VariantMembers = {};
export type PlasmicPriceComp__VariantsArgs = {};
type VariantPropType = keyof PlasmicPriceComp__VariantsArgs;
export const PlasmicPriceComp__VariantProps = new Array<VariantPropType>();

export type PlasmicPriceComp__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPriceComp__ArgsType;
export const PlasmicPriceComp__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicPriceComp__OverridesType = {
  frame77?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  frame67?: p.Flex<"div">;
};

export interface DefaultPriceCompProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPriceComp__RenderFunc(props: {
  variants: PlasmicPriceComp__VariantsArgs;
  args: PlasmicPriceComp__ArgsType;
  overrides: PlasmicPriceComp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"frame77"}
      data-plasmic-override={overrides.frame77}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.frame77
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"24px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"24px" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/blank_project/images/frame25.svg",
          fullWidth: 24,
          fullHeight: 24,
          aspectRatio: 1
        }}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame67"}
        data-plasmic-override={overrides.frame67}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame67)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "sUSD - 1.01",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
        {p.renderPlasmicSlot({
          defaultContents: "$ 6,580",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame77: ["frame77", "img", "frame67"],
  img: ["img"],
  frame67: ["frame67"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame77: "div";
  img: typeof p.PlasmicImg;
  frame67: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPriceComp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPriceComp__VariantsArgs;
    args?: PlasmicPriceComp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPriceComp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPriceComp__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPriceComp__ArgProps,
          internalVariantPropNames: PlasmicPriceComp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPriceComp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame77") {
    func.displayName = "PlasmicPriceComp";
  } else {
    func.displayName = `PlasmicPriceComp.${nodeName}`;
  }
  return func;
}

export const PlasmicPriceComp = Object.assign(
  // Top-level PlasmicPriceComp renders the root element
  makeNodeComponent("frame77"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    frame67: makeNodeComponent("frame67"),

    // Metadata about props expected for PlasmicPriceComp
    internalVariantProps: PlasmicPriceComp__VariantProps,
    internalArgProps: PlasmicPriceComp__ArgProps
  }
);

export default PlasmicPriceComp;
/* prettier-ignore-end */
